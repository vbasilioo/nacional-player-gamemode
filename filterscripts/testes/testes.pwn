#include <a_samp>
#include <crashdetect>

#define COLOR_GREY              0xAFAFAFAA

#define BUS_CHECKPOINT_SIZE 4.0
#define BUS_ROUTE_NO_REPEAT -1

enum {
    DIALOG_REVISTA_TIPO=9802,
    DIALOG_REVISTA_CORPO,
    DIALOG_REVISTA_MOCHILA
}

enum {
    BUS_ROUTE_TYPE_MUNICIPAL,
    BUS_ROUTE_TYPE_ESTADUAL
}

enum e_BUS_ROUTE_DATA {
    BUS_ROUTE_NAME[56],
    BUS_ROUTE_TYPE,
    BUS_ROUTE_POINT_REPEAT,
    Float:BUS_ROUTE_DISTANCE
};

enum e_BUS_ROUTES {
    BUS_ROUTE_LS,
    BUS_ROUTE_LV,
    BUS_ROUTE_SF,
    BUS_ROUTE_CITIES,
    BUS_ROUTE_BR,
};

enum E_BUS_CHECKPOINT_DATA {
	Float:E_BUS_CHECKPOINT_X,
	Float:E_BUS_CHECKPOINT_Y,
	Float:E_BUS_CHECKPOINT_Z,
	bool:E_BUS_CHECKPOINT_IS_STOP
};

new g_BUS_ROUTES_INFO[][e_BUS_ROUTE_DATA] = {
    {"Rota LS", BUS_ROUTE_TYPE_MUNICIPAL, 15, 0.0},
    {"Rota LV", BUS_ROUTE_TYPE_MUNICIPAL, 32, 0.0},
    {"Rota SF", BUS_ROUTE_TYPE_MUNICIPAL, 37, 0.0},
    {"Rota Cidades", BUS_ROUTE_TYPE_ESTADUAL, 15, 0.0},
    {"Rota Brasília", BUS_ROUTE_TYPE_ESTADUAL, 18, 0.0}
};

new const g_BUS_ROUTE_LS[][E_BUS_CHECKPOINT_DATA] = {
    {2394.0068,-1969.4148,13.4970,false}, // rota-ls 1
    {2368.9890,-1969.5925,13.4518,false}, // rota-ls 1
    {2214.8132,-2011.7375,13.4308,false}, // rota-ls 2
    {2233.8044,-2126.3665,13.4137,false}, // rota-ls 3
    {2230.1912,-2200.3074,13.4359,false}, // rota-ls 4
    {2261.8745,-2288.9534,13.4770,false}, // rota-ls 5
    {2158.7554,-2436.2402,13.4764,false}, // rota-ls 6
    {1924.7496,-2667.6311,6.0237,false}, // rota-ls 7
    {1561.4154,-2667.9546,6.8505,false}, // rota-ls 8
    {1357.1230,-2608.4521,13.4784,false}, // rota-ls 9
    {1359.8613,-2499.3132,11.8637,false}, // rota-ls 10
    {1376.8790,-2466.5410,7.2960,false}, // rota-ls 11
    {1545.3405,-2288.4622,-2.8939,false}, // rota-ls 12
    {1575.9724,-2315.2378,-2.7550,false}, // rota-ls 13
    {1651.5327,-2322.7458,-2.7417,true}, // rota-ls 14x (prefeitura)
    {1734.0502,-2299.8364,-2.7491,false}, // rota-ls 15
    {1760.3539,-2255.5930,0.7836,false}, // rota-ls 16
    {1795.9828,-2307.7031,13.0774,false}, // rota-ls 17
    {1638.7667,-2315.7673,13.4913,true}, // rota-ls 18x
    {1576.9550,-2304.2520,13.4539,false}, // rota-ls 19
    {1556.0825,-2284.1887,13.4832,false}, // rota-ls 20
    {1509.6113,-2247.7417,13.4873,false}, // rota-ls 21
    {1426.4113,-2298.3186,13.4816,false}, // rota-ls 22
    {1453.8425,-2332.2117,13.4830,false}, // rota-ls 23
    {1472.0621,-2351.9075,13.4817,false}, // rota-ls 24
    {1413.0490,-2375.5435,17.5135,false}, // rota-ls 25
    {1266.6981,-2327.7131,15.6330,false}, // rota-ls 26
    {1318.2888,-2411.2065,12.3364,false}, // rota-ls 27
    {1288.0209,-2446.8086,8.0203,false}, // rota-ls 28
    {1036.1722,-2157.4709,13.0516,false}, // rota-ls 29
    {1167.6591,-1854.4900,13.4987,false}, // rota-ls 30
    {1314.3203,-1831.0754,13.4840,false}, // rota-ls 31
    {1340.8455,-1734.8405,13.4862,false}, // rota-ls 32
    {1416.6816,-1736.0836,13.4881,true}, // rotals-c-2 i (PREF)
    {1667.4535,-1734.8430,13.4836,false}, // rotals-c-2 2
    {1687.6418,-1773.8708,13.4856,false}, // rotals-c-2 3
    {1750.9653,-1824.6956,13.4757,true}, // rotals-c-2 4x
    {1818.7556,-1865.7052,13.5165,false}, // rotals-c-2 5
    {1949.7612,-1935.2723,13.4860,false}, // rotals-c-2 6
    {1959.0332,-1976.2393,13.4865,false}, // rotals-c-2 7
    {1939.6309,-2050.2632,13.4855,false}, // rotals-c-2 8
    {1854.2994,-2049.5183,13.4844,true}, // rotals-c-2 9x
    {1820.4130,-2083.5037,13.4841,false}, // rota-ls 41
    {1819.8713,-2151.8833,13.4865,false}, // rota-ls 42
    {1855.6254,-2169.0503,13.4841,false}, // rota-ls 42
    {2091.5298,-2181.7781,13.4844,false}, // rota-ls 43
    {2163.5715,-2204.2473,13.3906,false}, // rota-ls 44
    {2271.1995,-2096.2524,13.5943,false}, // rota-ls 45
    {2239.5879,-2031.4519,13.4299,true}, // ok
    {2219.5886,-1919.0262,13.3397,false}, // rota-ls 47
    {2287.2825,-1897.8363,13.4813,false}, // a
    {2311.0781,-1951.7543,13.4676,false}, // a
    {2360.3362,-1974.0764,13.4602,false}, // a
    {2414.1702,-1947.4072,13.4821,false}, // a
    {2464.6697,-1936.0011,13.4048,true}, // ok
    {2589.5220,-1934.7036,13.4842,false}, // a
    {2703.5435,-1935.7418,13.4101,false}, // a
    {2710.9929,-1978.3953,13.4541,false}, // a
    {2757.8032,-1997.6124,13.4643,false}, // a
    {2771.2532,-1968.1844,13.4682,false}, // a
    {2773.0728,-1909.2434,11.9349,true}, // ok
    {2715.4976,-1887.6790,10.9840,false}, // a
    {2646.1614,-1817.1930,10.9387,false}, // a
    {2646.0969,-1750.6345,10.8256,false}, // a
    {2615.2732,-1730.1628,11.8583,false}, // a
    {2454.7173,-1728.8420,13.5645,true}, // ok
    {2363.9797,-1730.9255,13.4834,false}, // a
    {2346.2439,-1693.4908,13.4599,false}, // a
    {2296.4304,-1655.0641,14.7820,true}, // ok
    {2218.5313,-1645.7523,15.4627,false}, // a
    {2192.0051,-1669.1124,14.6492,false}, // a
    {2182.3005,-1739.8701,13.4772,false}, // a
    {2142.2332,-1748.6073,13.4996,true}, // ok
    {2096.9280,-1733.6459,13.4957,false}, // a
    {2115.2341,-1607.1310,24.5077,false}, // a
    {2114.7937,-1459.5326,23.9332,false}, // a
    {2114.8113,-1399.7831,23.9288,false}, // a
    {2137.2310,-1386.7070,23.9306,false}, // a
    {2231.1401,-1387.4325,23.9316,false}, // a
    {2276.4287,-1386.6838,24.0510,false}, // rota-ls ?1
    {2306.9175,-1358.1610,23.9596,false}, // rota-ls ?2
    {2307.0767,-1185.5101,25.4815,true}, // rota-ls ?3x
    {2349.9143,-1155.5126,27.2914,false}, // rota-ls ?4
    {2400.1282,-1177.1122,29.7953,false}, // rota-ls ?5
    {2448.4028,-1207.3164,34.0874,false}, // rota-ls ?6
    {2401.8887,-1253.0449,23.9232,true}, // rota-ls ?7x
    {2368.2737,-1280.7141,23.9358,false}, // rota-ls ?8
    {2336.6465,-1381.9091,23.9303,false}, // rota-ls ?9
    {2139.5610,-1381.4835,23.9281,false}, // rota-ls ?10
    {2109.7107,-1416.3698,23.9311,false}, // rota-ls ?11
    {2086.9590,-1457.9495,23.8373,false}, // rota-ls ?12
    {2013.2772,-1457.1093,13.5032,true}, // rota-ls ?13x
    {1694.4962,-1437.3392,13.4821,true}, // rota-ls ?14x
    {1655.5330,-1469.1758,13.4847,false}, // rota-ls ?15
    {1615.7322,-1590.1438,13.6498,false}, // rota-ls ?16
    {1489.0293,-1588.9038,13.4721,true}, // rota-ls ?17x
    {1432.8574,-1566.4675,13.4525,false}, // rota-ls ?18
    {1457.0914,-1456.8282,13.4629,false}, // rota-ls ?19
    {1458.1594,-1264.3047,13.4894,true}, // rota-ls ?20x
    {1429.8359,-1239.5259,13.4820,false}, // rota-ls ?21
    {1361.0009,-1221.0435,15.0042,false}, // rota-ls ?22
    {1364.7720,-1097.7802,24.1140,false}, // rota-ls ?23
    {1299.0256,-1034.8865,30.8178,true}, // rota-ls ?24x
    {1265.7186,-1013.3756,33.6473,false}, // rota-ls ?25
    {1189.2006,-935.2344,42.8454,true}, // rota-ls ?26x
    {1108.5254,-945.1144,42.7698,false}, // rotals-c 1
    {960.5099,-993.8992,37.2188,false}, // rotals-c 2
    {958.9115,-1116.4094,23.7853,true}, // rotals-c 3x
    {997.0421,-1148.3818,23.9524,false}, // rotals-c 4
    {1053.0232,-1180.6107,22.2921,false}, // rotals-c 5
    {1010.8713,-1217.0564,16.8659,true}, // rotals-c 6x
    {940.1201,-1266.1555,15.5415,false}, // rotals-c 7
    {917.1826,-1317.9226,13.5454,false}, // rotals-c 8
    {713.0751,-1316.4440,13.5000,false}, // rotals-c 9
    {623.9872,-1361.1295,13.5274,true}, // rotals-c 10x
    {659.8116,-1589.0760,14.7167,false}, // rotals-c 11
    {805.0377,-1594.2905,13.4892,true}, // rotals-c f
    {856.5626,-1596.5314,13.4897,false}, // rota-ls ?37
    {919.8970,-1550.6445,13.4853,false}, // rota-ls ?38
    {919.2287,-1457.4933,13.4842,false}, // rota-ls ?39
    {1025.2462,-1409.5238,13.1585,true}, // rota-ls ?40x
    {1161.1931,-1406.6182,13.5210,false}, // rota-ls ?41
    {1209.6436,-1326.1323,13.5002,true}, // rota-ls ?42x
    {1235.0046,-1282.5510,13.5685,false}, // rota-ls ?43
    {1305.6503,-1283.0775,13.4840,false}, // rota-ls ?44
    {1340.7493,-1310.9962,13.5360,false}, // rota-ls ?45
    {1298.3706,-1541.1230,13.4840,false}, // rota-ls ?46
    {1293.8259,-1634.6843,13.4824,true}, // rota-ls ?47x
    {1294.5270,-1776.1008,13.4843,false}, // rota-ls ?48
    {1330.3613,-1857.0084,13.4892,false}, // rota-ls ?49
    {1472.6957,-1874.2593,13.4842,false}, // rota-ls ?50
    {1527.5139,-1915.9451,15.0796,false}, // rota-ls ?51
    {1629.4690,-2159.3560,24.2209,false}, // rota-ls ?52
    {1918.8314,-2169.2642,13.4839,false}, // rota-ls ?53
    {2106.4333,-2192.4282,13.4678,false}, // rota-ls ?54
    {2107.2937,-2254.2097,13.4820,false}, // rota-ls ?55
    {2134.8394,-2331.9214,13.4499,false}, // rota-ls ?56
    {2170.8496,-2393.1118,13.4848,false}, // rota-ls ?57
    {1929.0063,-2668.3618,6.0262,false}, // rota-ls ?58
    {1407.0741,-2660.1814,13.4766,false}, // rota-ls ?59
    {1359.6208,-2502.2852,12.4492,false}, // rota-ls ?60
    {1418.5145,-2466.0774,5.4337,false}, // rota-ls ?61
    {1522.3333,-2352.9849,-0.6161,false}, // rota-ls ?62
    {1549.1541,-2287.9050,-2.8893,false}, // rota-ls ?63
    {1573.0247,-2309.0981,-2.7707,false}, // rota-ls ?64
    {1654.4153,-2322.6648,-2.7360,true} // rota-ls ?65x
};

new const g_BUS_ROUTE_LV[][E_BUS_CHECKPOINT_DATA] = {
    {2416.4197,-2069.6482,13.4433,false}, // rota-lv 1
    {2394.1389,-1970.3108,13.4848,false}, // rota-lv 2
    {2262.9705,-1969.9297,13.4597,false}, // rota-lv 3
    {2210.7610,-1998.3599,13.4193,false}, // rota-lv 4
    {2263.8254,-2098.6667,13.8061,false}, // rota-lv 5
    {2211.5759,-2182.4622,13.4334,false}, // rota-lv 6
    {2260.0266,-2229.8171,13.4250,false}, // rota-lv 7
    {2273.4465,-2277.5007,13.4762,false}, // rota-lv 8
    {2171.5652,-2390.2798,13.4760,false}, // rota-lv 9
    {2156.1895,-2585.4182,13.4763,false}, // rota-lv 10
    {2042.0422,-2667.6902,12.3783,false}, // rota-lv 11
    {1443.8422,-2667.5354,13.4987,false}, // rota-lv 12
    {1348.0469,-2554.2876,13.4763,false}, // rota-lv 13
    {1349.0773,-2234.2703,13.4842,false}, // rota-lv 14
    {1520.1619,-2134.4314,14.1701,false}, // rota-lv 15
    {1660.5126,-1925.7999,24.3936,false}, // rota-lv 16
    {1613.7324,-1572.8604,28.6872,false}, // rota-lv 17
    {1648.3783,-1132.0815,58.5133,false}, // rota-lv 18
    {1715.0375,-690.9252,45.7072,false}, // rota-lv 19
    {1712.9390,-489.0409,33.7345,false}, // rota-lv 20
    {1680.1616,-244.4154,42.9080,false}, // rota-lv 21
    {1644.1185,-1.8677,36.6942,false}, // rota-lv 22
    {1654.4261,241.4519,30.0231,false}, // rota-lv 23
    {1748.9200,524.1749,27.7746,false}, // rota-lv 24
    {1804.7887,739.7928,13.2352,false}, // rota-lv 25
    {1809.4010,1087.1951,6.8353,false}, // rota-lv 26
    {1809.3582,1413.4049,6.8374,false}, // rota-lv 27
    {1837.7164,1619.9946,7.6641,false}, // rota-lv 28
    {1851.8219,1716.3036,11.1255,false}, // rota-lv 29
    {1718.9672,1690.7672,10.7439,false}, // rota-lv 30
    {1731.7288,1618.2517,9.6755,false}, // rota-lv 31
    {1728.0417,1531.1619,10.7688,true}, // rota-lv 32x
    {1710.1115,1423.2059,10.5841,false}, // rota-lv 33
    {1729.0566,1294.9612,10.7944,false}, // rota-lv 34
    {1702.7726,1275.4810,10.8633,false}, // rota-lv 34
    {1644.5851,1236.0388,10.7734,false}, // rota-lv 35
    {1616.4436,1134.8704,10.7734,false}, // rota-lv 36
    {1566.3092,1108.1555,10.7706,false}, // rota-lv 37
    {1563.7634,950.6517,10.7787,true}, // rota-lv 38x
    {1533.4484,913.5675,10.7735,false}, // rota-lv 39
    {1509.8821,955.7344,10.7806,false}, // rota-lv 40
    {1487.0790,1134.8763,10.7799,false}, // rota-lv 41
    {1451.0845,1170.5814,10.7858,false}, // rota-lv 42
    {1369.5244,1196.8190,10.7699,true}, // rota-lv 43x
    {1009.3422,1231.1666,10.7736,false}, // rota-lv 44
    {1010.9939,1397.6239,10.7672,true}, // rota-lv 45x
    {1009.2982,1669.3762,10.8753,false}, // rota-lv 46
    {1032.6729,1809.4940,10.7951,false}, // rota-lv 47
    {1256.5626,1810.5708,12.2497,false}, // rota-lv 48
    {1328.8978,1834.8052,10.7740,false}, // rota-lv 49
    {1355.0559,1869.4117,10.8308,false}, // rota-lv 50
    {1606.3878,1869.4734,10.7715,true}, // rota-lv 51x
    {1708.8152,1897.4448,10.7745,false}, // rota-lv 52
    {1711.0560,2115.8582,10.7686,true}, // rota-lv 53x
    {1645.9297,2176.7578,10.7722,true}, // rota-lv 54x
    {1570.6392,2194.9661,10.7755,false}, // rota-lv 55
    {1545.7367,2394.9639,10.7738,false}, // rota-lv 56
    {1479.6721,2423.5261,12.2106,false}, // rota-lv 57
    {1433.3326,2608.4766,10.7745,true}, // rota-lv 58x
    {1358.6143,2592.0637,10.7754,false}, // rota-lv 59
    {1249.2117,2617.8687,10.7801,false}, // rota-lv 60
    {1277.1627,2710.6462,10.7736,false}, // rota-lv 61
    {1571.7017,2730.8965,10.7757,false}, // rota-lv 62
    {1712.1385,2710.6348,10.7726,false}, // rota-lv 63
    {1929.8850,2740.1760,10.7747,false}, // rota-lv 64
    {2090.8259,2759.4365,10.7702,false}, // rota-lv 65
    {2141.2168,2770.9080,10.8098,false}, // rota-lv 66
    {2224.0898,2745.5366,10.7817,false}, // rota-lv 67
    {2352.6621,2709.5542,10.8077,true}, // rota-lv 68x
    {2384.7114,2662.7017,12.2270,false}, // rota-lv 69
    {2365.1509,2464.2080,10.7727,false}, // rota-lv 70
    {2400.5149,2409.7217,10.7798,true}, // rota-lv 71x
    {2499.3257,2411.6277,10.7698,false}, // rota-lv 72
    {2524.6396,2359.1177,10.7803,false}, // rota-lv 73
    {2525.2222,2184.6050,10.7713,false}, // rota-lv 74
    {2504.4519,2026.9226,10.7741,false}, // rota-lv 75
    {2504.9419,1789.6119,10.7729,false}, // rota-lv 76
    {2472.9160,1715.0796,10.7739,false}, // rota-lv 77
    {2324.3538,1691.9780,10.7730,false}, // rota-lv 78
    {2323.7961,1571.2441,10.7768,true}, // rota-lv 79x
    {2344.8264,1531.0967,10.7769,false}, // rota-lv 80
    {2425.1345,1500.7487,10.7732,false}, // rota-lv 81
    {2443.6599,1312.1265,10.8949,false}, // rota-lv 82
    {2593.9097,1309.6362,10.7711,true}, // rota-lv 83x
    {2789.1851,1311.5732,10.8611,false}, // rota-lv 84
    {2818.3035,1312.8690,10.9127,false}, // rota-lv 84.2
    {2834.1924,1289.8335,10.8828,true}, // rota-lv 85x
    {2805.0891,1275.8695,10.8500,false}, // rota-lv 86
    {2789.4551,1315.9860,10.8323,false}, // rota-lv 87
    {2668.7246,1315.6738,11.5805,false}, // rota-lv 88
    {2625.4128,1291.3320,10.7754,false}, // rota-lv 89
    {2605.4746,1231.4510,10.7701,false}, // rota-lv 90
    {2605.5825,1127.6023,10.7728,false}, // rota-lv 91
    {2596.3591,1025.9396,10.7764,false}, // rota-lv 92
    {2463.6731,1016.7599,10.7731,true}, // rota-lv 93x
    {2430.9819,1114.1686,10.7758,true}, // rota-lv 94x
    {2390.8552,1195.1561,10.7740,false}, // rota-lv 95
    {2345.6440,1146.8447,10.7732,false}, // rota-lv 96
    {2321.1162,975.6664,10.7675,false}, // rota-lv 97
    {2069.0022,991.2997,10.8287,false}, // rota-lv 97.2
    {2076.0085,1138.0908,10.7747,true}, // rota-lv 98x
    {2069.9744,1400.2739,10.7732,false}, // rota-lv 99
    {2076.0986,1683.0933,10.7730,true}, // rota-lv 100x
    {2135.1982,1834.7565,10.7735,false}, // rota-lv 101
    {2149.0518,1982.7493,10.7794,false}, // rota-lv 102
    {2153.0227,2255.8152,10.7731,false}, // rota-lv 103
    {2176.7607,2348.3213,10.7845,false}, // rota-lv 104
    {2093.2441,2325.2654,10.7747,false}, // rota-lv 105
    {2114.3340,2268.3337,10.7736,false}, // rota-lv 106
    {2125.7720,1989.2651,10.7796,false}, // rota-lv 107
    {2091.7593,1798.2693,10.7734,false}, // rota-lv 108
    {2044.3820,1636.2122,10.7734,false}, // rota-lv 109
    {2044.7512,1328.8701,10.7736,false}, // rota-lv 110
    {2038.8245,1022.0837,10.7732,true}, // rota-lv 111x
    {2023.8828,855.6695,6.8318,false}, // rota-lv 112
    {1809.9275,885.3047,10.0488,false}, // rota-lv 114
    {1809.6458,1480.2305,6.8358,false}, // rota-lv 115
    {1856.9147,1647.5833,9.5558,false}, // rota-lv 116
    {1837.0095,1715.5703,12.2142,false}, // rota-lv 117
    {1717.6292,1687.1615,10.7155,false}, // rota-lv 118
    {1728.7548,1608.4270,10.0512,false}, // rota-lv 119
    {1728.1793,1531.0546,10.7705,true} // rota-lv 120x
};

new const g_BUS_ROUTE_SF[][E_BUS_CHECKPOINT_DATA] = {
    {2416.4470,-2050.2556,13.5003,false}, // ROTA-SF 1
    {2387.3064,-1970.0210,13.5290,false}, // ROTA-SF 2
    {2210.9382,-1997.4307,13.4649,false}, // ROTA-SF 3
    {2266.1418,-2095.7783,13.7980,false}, // ROTA-SF 4
    {2125.5791,-2234.1362,13.5385,false}, // ROTA-SF 5
    {2115.7905,-2324.8650,13.5287,false}, // ROTA-SF 6
    {2171.6511,-2390.9104,13.5069,false}, // ROTA-SF 7
    {2148.4138,-2612.4663,13.5323,false}, // ROTA-SF 8
    {2025.8640,-2667.5874,11.4801,false}, // ROTA-SF 9
    {1531.5835,-2667.8450,8.5796,false}, // ROTA-SF 10
    {1358.6201,-2517.0193,13.5268,false}, // ROTA-SF 11
    {1342.2207,-2447.4307,7.8031,false}, // ROTA-SF 12
    {1224.0486,-2432.8972,9.5516,false}, // ROTA-SF 13
    {1036.2466,-2216.6448,13.1108,false}, // ROTA-SF 14
    {1064.8057,-1919.5396,13.1224,false}, // ROTA-SF 15
    {972.1085,-1780.7617,14.2390,false}, // ROTA-SF 17
    {714.4929,-1750.9498,14.5471,false}, // ROTA-SF 18
    {395.3129,-1699.5867,8.4807,false}, // ROTA-SF 19
    {246.2396,-1664.8212,10.6560,false}, // ROTA-SF 20
    {47.2596,-1523.1141,5.2519,false}, // ROTA-SF 21
    {-124.9492,-1458.9114,2.8408,false}, // ROTA-SF 22
    {-139.6724,-1267.4698,2.8453,false}, // ROTA-SF 23
    {-81.2966,-1044.5500,21.9702,false}, // ROTA-SF 24
    {-254.6598,-891.6332,44.4495,false}, // ROTA-SF 25
    {-413.5688,-824.7712,48.4081,false}, // ROTA-SF 26
    {-551.8127,-924.8922,58.1997,false}, // ROTA-SF 27
    {-739.3065,-1003.3023,76.1725,false}, // ROTA-SF 28
    {-863.9357,-1053.0322,91.1648,false}, // ROTA-SF 29
    {-954.0216,-1047.3741,96.4816,false}, // ROTA-SF 30
    {-1167.4302,-828.0375,66.2673,false}, // ROTA-SF 31
    {-1251.3726,-780.5794,66.3582,false}, // ROTA-SF 32
    {-1525.5277,-814.9199,57.1375,false}, // ROTA-SF 33
    {-1750.8676,-707.7766,28.6939,false}, // ROTA-SF 34
    {-1736.0629,-583.6270,16.4825,false}, // ROTA-SF 35
    {-1623.7524,-540.2098,11.4967,false}, // ROTA-SF 36
    {-1453.7124,-481.5988,14.1482,false}, // ROTA-SF 37
    {-1469.1932,-271.5086,14.1318,true}, // ROTA-SF 38x (aero-sf)
    {-1604.7316,-367.5043,14.1456,false}, // ROTA-SF 39
    {-1693.1765,-565.9193,13.3021,false}, // ROTA-SF 40
    {-1819.0441,-535.7242,15.2968,false}, // ROTA-SF 41
    {-1800.6677,-337.0279,22.8835,false}, // ROTA-SF 42
    {-1821.0469,-114.3418,5.6446,false}, // ROTA-SF 43
    {-1935.6138,-64.4369,25.7018,false}, // ROTA-SF 45
    {-2004.1256,-43.5989,35.3145,false}, // ROTA-SF 46
    {-1988.0564,151.5127,27.6187,true}, // ROTA-SF 47X
    {-2002.2279,253.6637,30.4552,false}, // ROTA-SF 48
    {-1998.0009,489.0050,35.1476,true}, // ROTA-SF 49x
    {-1916.2604,602.8173,35.1643,false}, // ROTA-SF 50
    {-1819.8943,599.8959,35.0541,true}, // ROTA-SF 51x
    {-1709.0840,675.9758,24.8843,false}, // ROTA-SF 52
    {-1707.9446,802.8091,24.8730,true}, // ROTA-SF 53x
    {-1710.0540,1027.2758,45.2662,false}, // ROTA-SF 54
    {-1745.7588,1106.7788,45.4384,false}, // ROTA-SF 55
    {-1848.9401,1107.6561,45.4363,false}, // ROTA-SF 56
    {-1918.0494,1080.9365,49.0316,false}, // ROTA-SF 57
    {-1988.9728,1083.3953,55.7113,true}, // ROTA-SF 58x
    {-2202.4375,1081.1747,55.7262,false}, // ROTA-SF 59
    {-2492.1772,1117.1936,55.7242,false}, // ROTA-SF 60
    {-2593.0962,1094.7894,56.8835,false}, // ROTA-SF 61
    {-2608.7292,938.4251,70.5884,false}, // ROTA-SF 62
    {-2608.3811,798.5123,49.7111,false}, // ROTA-SF 63
    {-2663.2400,711.7174,27.8794,true}, // ROTA-SF 64x
    {-2752.1350,688.0650,41.2763,false}, // ROTA-SF 65
    {-2714.3979,492.4023,6.1652,false}, // ROTA-SF 66
    {-2716.8362,418.0143,4.1431,false}, // ROTA-SF 66.2
    {-2753.2881,377.4407,4.2648,true}, // ROTA-SF 67x
    {-2727.1067,334.6151,4.3275,false}, // ROTA-SF 68
    {-2708.7205,280.2233,4.3761,false}, // ROTA-SF 69
    {-2709.1565,177.0533,4.3060,true}, // ROTA-SF 70x
    {-2729.3318,40.7055,6.1892,false}, // ROTA-SF 71
    {-2811.2512,-2.0386,7.1767,false}, // ROTA-SF 72
    {-2813.6824,-287.7944,7.1792,false}, // ROTA-SF 73
    {-2769.9370,-503.0134,7.3284,false}, // ROTA-SF 74
    {-2666.6426,-498.2400,20.5976,false}, // ROTA-SF 75
    {-2649.2180,-394.5276,33.7805,false}, // ROTA-SF 76
    {-2416.7646,-374.8893,73.5455,false}, // ROTA-SF 77
    {-2325.9817,-450.8199,80.0651,false}, // ROTA-SF 78
    {-2437.3054,-416.2666,85.4520,false}, // ROTA-SF 79
    {-2603.1975,-468.0995,68.7428,false}, // ROTA-SF 80
    {-2602.4758,-501.0536,73.2523,false}, // ROTA-SF 81
    {-2495.2556,-482.8377,95.6653,false}, // ROTA-SF 82
    {-2453.9456,-552.1544,124.1198,false}, // ROTA-SF 83
    {-2416.2607,-624.5939,132.5148,true}, // ROTA-SF 84x
    {-2354.2371,-673.4677,117.5403,false}, // ROTA-SF 85
    {-2359.5962,-759.9186,97.4676,false}, // ROTA-SF 86
    {-2310.7935,-783.4976,90.8195,false}, // ROTA-SF 87
    {-2201.7815,-768.5566,62.3410,false}, // ROTA-SF 88
    {-2223.2620,-927.2787,42.5389,false}, // ROTA-SF 89
    {-2169.8394,-1020.7397,33.8886,false}, // ROTA-SF 90
    {-2035.6658,-1233.4065,34.5624,false}, // ROTA-SF 91
    {-1902.0140,-1348.6239,40.4145,false}, // ROTA-SF 92
    {-1894.4503,-1121.6389,38.3950,false}, // ROTA-SF 93
    {-1886.9279,-690.2344,42.1613,false}, // ROTA-SF 94
    {-1862.7964,-585.9626,23.2615,false}, // ROTA-SF 95
    {-1732.0665,-585.2610,16.4780,false}, // ROTA-SF 96
    {-1633.9463,-542.2185,11.4993,false}, // ROTA-SF 97
    {-1437.8373,-472.0375,14.1503,false}, // ROTA-SF 98
    {-1466.0928,-273.2222,14.1753,true} // ROTA-SF 99x
};

new const g_BUS_ROUTE_CITIES[][E_BUS_CHECKPOINT_DATA] = {
    {2415.4824,-2057.9329,13.4942,false}, // rota-cidades 1
    {2377.4766,-1969.0471,13.4948,false}, // rota-cidades 2
    {2211.2507,-1997.5608,13.4619,false}, // rota-cidades 3
    {2237.8320,-2123.0879,13.4972,false}, // rota-cidades 5
    {2249.2432,-2218.1658,13.4694,false}, // rota-cidades 6
    {2251.5115,-2298.1003,13.5118,false}, // rota-cidades 7
    {2157.7190,-2451.8596,13.5081,false}, // rota-cidades 8
    {2039.1761,-2667.6343,12.2534,false}, // rota-cidades 9
    {1460.2471,-2667.3831,12.6751,false}, // rota-cidades 10
    {1355.0376,-2531.4016,13.4687,false}, // rota-cidades 11
    {1416.9619,-2466.4106,5.5372,false}, // rota-cidades 12
    {1522.5323,-2387.4768,0.8266,false}, // rota-cidades 13
    {1555.1598,-2287.8540,-2.8600,false}, // rota-cidades 14
    {1601.4097,-2321.1194,-2.7187,false}, // rota-cidades 15
    {1693.4349,-2322.7136,-2.7182,true}, // rota-cidades 16x
    {1735.7943,-2274.3145,-2.7108,false}, // rota-cidades 17
    {1796.7083,-2294.0334,11.1611,false}, // rota-cidades 18
    {1751.8019,-2316.0813,13.5084,false}, // rota-cidades 19
    {1669.2572,-2315.8987,13.5166,true}, // rota-cidades 20x
    {1578.8767,-2299.5403,13.4871,false}, // rota-cidades 21
    {1547.2842,-2283.2256,13.5156,false}, // rota-cidades 22
    {1508.0154,-2247.2991,13.5152,false}, // rota-cidades 23
    {1439.9460,-2247.7498,13.5132,false}, // rota-cidades 24
    {1443.6034,-2328.3694,13.5169,false}, // rota-cidades 25
    {1473.1490,-2359.5168,13.5140,false}, // rota-cidades 26
    {1435.8586,-2376.5762,15.2868,false}, // rota-cidades 27
    {1288.9866,-2373.5247,21.5867,false}, // rota-cidades 28
    {1298.4634,-2310.0225,13.5146,false}, // rota-cidades 29
    {1320.0746,-2391.7629,13.5235,false}, // rota-cidades 30
    {1320.1638,-2521.5781,13.4761,false}, // rota-cidades 31
    {1344.0854,-2628.0452,13.5115,false}, // rota-cidades 32
    {1472.1907,-2688.4585,11.9766,false}, // rota-cidades 33
    {2077.0598,-2684.8018,13.4626,false}, // rota-cidades 34
    {2177.6565,-2512.4504,13.5088,false}, // rota-cidades 35
    {2257.8042,-2319.9312,13.5083,false}, // rota-cidades 36
    {2413.0781,-2182.4043,13.5073,false}, // rota-cidades 37
    {2707.9963,-2173.1440,11.0560,false}, // rota-cidades 38
    {2840.9143,-2020.0787,11.0692,false}, // rota-cidades 39
    {2851.0435,-1789.4791,11.0133,false}, // rota-cidades 40
    {2921.9619,-1509.6335,11.0086,false}, // rota-cidades 41
    {2890.4268,-1129.3860,11.0086,false}, // rota-cidades 42
    {2895.1892,-512.8337,12.5796,false}, // rota-cidades 43
    {2839.5906,-340.0962,7.8685,false}, // rota-cidades 44
    {2812.8999,-227.0086,13.4004,false}, // rota-cidades 45
    {2862.2168,-147.7449,21.0113,false}, // rota-cidades 46
    {2883.7886,-53.2771,18.6786,false}, // rota-cidades 47
    {2809.2295,48.4123,20.3409,false}, // rota-cidades 48
    {2596.0374,44.8501,26.4569,false}, // rota-cidades 49
    {2436.1523,44.7883,26.4934,false}, // rota-cidades-c4 1
    {2391.2041,17.1197,26.4939,false}, // rota-cidades-c4 2
    {2373.7651,-26.3841,26.4955,false}, // rota-cidades-c4 3
    {2340.8362,-54.6548,26.4939,false}, // rota-cidades-c4 4
    {2321.0112,-96.3647,26.4937,false}, // rota-cidades-c4 5
    {2296.3328,-76.0260,26.4938,false}, // rota-cidades-c4 6
    {2297.8271,-8.3850,26.5633,true}, // rota-cidades-c4 7x
    {2272.8381,44.7035,26.4945,false}, // rota-cidades-c4 8
    {1892.4662,48.5799,35.1993,false}, // rota-cidades-c4 9
    {1649.3573,135.5156,30.7193,false}, // rota-cidades-c4 10
    {1515.9127,138.5305,31.4378,false}, // rota-cidades 50
    {1346.1384,250.0833,19.5232,false}, // rota-cidades 51
    {1346.8313,303.5884,19.5649,false}, // rota-cidades 52
    {1257.0173,343.9431,19.5397,true}, // rota-cidades-c i (crematorio)
    {1206.6625,319.3057,19.6260,false}, // rota-cidades-c 2
    {1224.7997,274.0595,19.5580,false}, // rota-cidades-c 3
    {1281.0820,237.2783,19.0331,false}, // rota-cidades-c 5
    {1233.8210,89.1157,21.2083,false}, // rota-cidades-c 5.2
    {1289.8462,-84.1609,36.2341,false}, // rota-cidades-c 6
    {1201.3966,-213.5734,34.4476,false}, // rota-cidades-c 7
    {1220.2656,-416.0243,6.0796,false}, // rota-cidades-c 8
    {836.3163,-552.6273,16.4102,false}, // rota-cidades-c 9
    {804.3482,-527.2985,16.3149,false}, // rota-cidades-c 10
    {628.3735,-527.0658,16.3211,false}, // rota-cidades-c 11
    {626.6115,-488.2589,16.3028,false}, // rota-cidades-c 12
    {646.7460,-460.6516,16.3937,true}, // rota-cidades-c 13x
    {619.5438,-411.6542,17.5932,false}, // rota-cidades-c 14
    {439.0713,-403.8449,28.2045,false}, // rota-cidades-c 15
    {211.7552,-323.7707,2.2178,false}, // rota-cidades-c 16
    {186.3164,-225.4602,1.5734,false}, // rota-cidades-c 17
    {159.8975,-208.1090,1.6315,true}, // rota-cidades-c 18x
    {-153.7847,-180.6099,2.0890,true}, // rota-cidades-c f (fazenda)
    {-302.9377,-180.0294,1.2047,false}, // rota-cidades 61
    {-278.3414,-280.8291,2.5192,false}, // rota-cidades 62
    {-455.8582,-267.7209,42.6373,false}, // rota-cidades 63
    {-647.9521,-238.6714,63.4860,false}, // rota-cidades 64
    {-871.3649,-244.9009,37.5431,false}, // rota-cidades 65
    {-958.1529,-276.8606,36.6956,false}, // rota-cidades 66
    {-970.9921,-445.6886,34.9334,false}, // rota-cidades 67
    {-813.0074,-457.7877,18.3831,false}, // rota-cidades 68
    {-643.8821,-401.4491,21.4035,false}, // rota-cidades 69
    {-408.4394,-484.9529,19.1719,false}, // rota-cidades 70
    {-403.6700,-668.4003,16.0006,false}, // rota-cidades 71
    {-395.7490,-856.1463,27.1094,false}, // rota-cidades 72
    {-551.0184,-1096.5831,23.3165,false}, // rota-cidades 73
    {-657.2116,-1379.6659,19.1537,false}, // rota-cidades 74
    {-700.1096,-1711.7015,43.8728,false}, // rota-cidades 75
    {-711.7514,-1383.4470,61.3708,false}, // rota-cidades 76
    {-754.3846,-1275.6521,70.6472,false}, // rota-cidades 77
    {-760.4991,-1591.6367,95.3580,false}, // rota-cidades 78
    {-824.1653,-1802.3099,91.9964,false}, // rota-cidades 79
    {-939.8354,-1900.0842,82.1164,false}, // rota-cidades 80
    {-1195.9419,-1815.2593,55.8930,false}, // rota-cidades 81
    {-1586.4625,-1604.1829,36.5638,false}, // rota-cidades 82
    {-1966.2332,-1826.5690,36.2198,false}, // rota-cidades 83
    {-2109.8042,-2081.9285,62.7949,false}, // rota-cidades 84
    {-2246.2957,-2244.9517,30.2593,false}, // rota-cidades 85
    {-2140.2488,-2302.7122,30.6030,false}, // rota-cidades 86
    {-2124.9624,-2244.5525,30.6018,false}, // rota-cidades 87
    {-2172.7441,-2265.6611,30.6021,false}, // rota-cidades 88
    {-2213.7183,-2262.8457,30.5725,true}, // rota-cidades 89x
    {-2230.0735,-2194.6069,38.1059,false}, // rota-cidades ?1
    {-2078.2690,-2005.9486,61.0848,false}, // rota-cidades ?2
    {-1759.5964,-1682.4316,35.0528,false}, // rota-cidades ?3
    {-1542.5603,-1586.1239,37.8708,false}, // rota-cidades ?4
    {-1713.6205,-1481.7751,34.6718,false}, // rota-cidades ?5
    {-1901.8660,-1348.5869,40.3968,false}, // rota-cidades ?5
    {-1894.4055,-960.9797,43.0048,false}, // rota-cidades ?6
    {-1886.7076,-691.9511,42.2534,false}, // rota-cidades ?7
    {-1853.0007,-585.1143,21.5051,false}, // rota-cidades ?8
    {-1642.5387,-545.9800,11.4874,false}, // rota-cidades ?9
    {-1467.2489,-485.3217,14.1315,false}, // rota-cidades ?10
    {-1433.1361,-289.8776,14.1315,true}, // rota-cidades ?11x
    {-1611.2844,-398.9293,14.1239,false}, // rota-cidades ?12
    {-1696.1019,-569.2439,13.8709,false}, // rota-cidades ?13
    {-1819.2997,-545.2124,15.7350,false}, // rota-cidades ?15
    {-1796.5575,-233.7736,18.3800,false}, // rota-cidades ?16
    {-1807.1151,151.9778,15.0942,false}, // rota-cidades ?17
    {-1660.0519,387.4867,7.1635,false}, // rota-cidades ?18
    {-1537.6211,782.6306,7.1730,false}, // rota-cidades ?19
    {-1582.1173,1090.4630,7.1770,false}, // rota-cidades ?20
    {-1755.2087,1369.4303,7.1736,false}, // rota-cidades ?21
    {-2003.1885,1312.9745,7.1725,false}, // rota-cidades ?22
    {-2075.8557,1324.0035,7.1772,false}, // rota-cidades ?22
    {-2351.9888,1377.9050,7.2148,false}, // rota-cidades ?24
    {-2457.5471,1351.1454,7.1779,false}, // rota-cidades ?25
    {-2481.5837,1197.2529,36.5561,false}, // rota-cidades ?26
    {-2601.5339,1211.6310,51.9960,false}, // rota-cidades ?27
    {-2668.2551,1242.0520,55.5708,false}, // rota-cidades ?28
    {-2671.2571,1766.4023,68.2310,false}, // rota-cidades ?29
    {-2723.4946,2312.7209,65.5938,false}, // rota-cidades ?30
    {-2706.0305,2363.2712,71.0554,false}, // rota-cidades ?31
    {-2569.2844,2479.0239,19.9501,false}, // rota-cidades ?32
    {-2536.2102,2404.0566,15.2326,false}, // rota-cidades ?33
    {-2565.4775,2315.7905,4.9658,false}, // rota-cidades ?34
    {-2489.2922,2257.5774,4.9701,true}, // rota-cidades-c2 i (marinha)
    {-2464.4648,2313.0334,4.9689,false}, // rota-cidades-c2 2
    {-2532.3020,2455.0461,18.2280,false}, // rota-cidades-c2 3
    {-2662.1458,2488.7129,34.4086,false}, // rota-cidades-c2 4
    {-2738.2854,2382.8000,72.5829,false}, // rota-cidades-c2 4.2
    {-2665.4934,2576.7595,75.2861,false}, // rota-cidades-c2 4.3
    {-2228.6504,2637.5066,55.3624,false}, // rota-cidades-c2 5
    {-1798.0540,2190.7737,16.1282,false}, // rota-cidades-c2 6
    {-1674.3990,1988.0593,19.9721,false}, // rota-cidades-c2 7
    {-1664.7406,1826.2244,25.9652,false}, // rota-cidades-c2 8
    {-1466.3129,1844.3344,32.9868,false}, // rota-cidades-c2 9
    {-1231.6921,1803.2563,41.2717,false}, // rota-cidades-c2 10
    {-1140.1622,1771.1956,38.1615,false}, // rota-cidades-c2 11
    {-925.7921,1714.2491,27.8598,false}, // rota-cidades-c2 12
    {-848.9009,1559.2927,24.3552,true}, // rota-cidades-c2 13x
    {-811.8325,1490.0465,20.3646,false}, // rota-cidades-c2 14
    {-756.8631,1517.9165,26.5078,false}, // rota-cidades-c2 15
    {-788.9835,1578.4387,27.0936,false}, // rota-cidades-c2 16
    {-830.5598,1619.5458,27.0949,false}, // rota-cidades-c2 17
    {-874.6324,1648.2971,27.1431,false}, // rota-cidades-c2 18
    {-1090.2355,1751.1470,32.6973,false}, // rota-cidades-c2 19
    {-1211.3406,1867.2550,41.0140,false}, // rota-cidades-c2 20
    {-1338.9902,2077.2869,51.4191,false}, // rota-cidades-c2 21
    {-1438.9346,2425.0056,57.6653,false}, // rota-cidades-c2 22
    {-1404.7954,2602.8005,55.6664,false}, // rota-cidades-c2 23
    {-1421.8857,2652.9980,55.8986,true}, // rota-cidades-c2 24x
    {-1463.3110,2673.1609,55.8213,false}, // rota-cidades-c2 25
    {-1630.8821,2695.5588,55.7346,false}, // rota-cidades-c2 26
    {-1611.8389,2723.3162,58.1109,false}, // rota-cidades-c2 27
    {-1397.5171,2697.3223,57.2432,false}, // rota-cidades-c2 28
    {-1317.9121,2648.2976,50.0972,false}, // rota-cidades-c2 29
    {-1093.8827,2698.9028,46.0009,false}, // rota-cidades-c2 30
    {-807.5729,2727.0215,45.5552,false}, // rota-cidades-c2 31
    {-374.0163,2675.3423,65.0440,false}, // rota-cidades-c2 32
    {-283.0509,2625.9382,62.9986,true}, // rota-cidades-c2 fx (ecstasy)
    {-254.2467,2669.0122,62.6703,false}, // rota-cidades ?57
    {-290.0871,2703.8152,62.7236,false}, // rota-cidades ?58
    {-388.5973,2706.8677,63.1035,false}, // rota-cidades ?59
    {-525.3674,2720.1060,66.1179,false}, // rota-cidades ?60
    {-781.0456,2711.9924,45.7324,false}, // rota-cidades ?61
    {-713.2819,2673.2773,58.9366,false}, // rota-cidades ?62
    {-726.2358,2564.6770,72.0222,false}, // rota-cidades ?63
    {-588.4337,2430.0967,69.4226,false}, // rota-cidades ?64
    {-358.7951,2494.0781,37.4257,false}, // rota-cidades ?65
    {-179.2960,2483.1511,23.2632,true}, // rota-cidades ?67x
    {-67.5015,2330.4551,21.7806,false}, // rota-cidades ?68
    {262.3563,2282.0337,24.9483,false}, // rota-cidades ?69
    {544.7795,2325.7495,32.5086,false}, // rota-cidades ?70
    {601.2685,2058.7961,36.9201,false}, // rota-cidades ?71
    {526.5201,1724.7777,10.6756,false}, // rota-cidades ?72
    {461.4619,1639.4161,15.8931,false}, // rota-cidades ?73
    {146.1242,1170.2690,15.5759,false}, // rota-cidades ?74
    {96.2660,1199.2723,18.7123,false}, // rota-cidades ?75
    {-198.2478,1180.4171,19.7576,false}, // rota-cidades ?76
    {-196.8047,957.0325,17.1272,true}, // rota-cidades ?1 (fort-carson)
    {-259.5280,784.5383,16.9138,false}, // rota-cidades ?3
    {-149.1495,814.1342,21.9532,false}, // rota-cidades ?4
    {-112.5677,788.7905,21.1142,false}, // rota-cidades ?5
    {-171.2263,742.5861,24.7325,false}, // rota-cidades ?6
    {-278.6853,693.7382,20.0373,false}, // rota-cidades ?7
    {-270.7162,615.3660,13.1572,false}, // rota-cidades ?8
    {-178.5504,646.3286,5.2384,false}, // rota-cidades ?9
    {-136.9264,596.4624,2.2131,false}, // rota-cidades ?10
    {-104.3464,538.7455,7.0890,false}, // rota-cidades ?11
    {-25.6596,577.6272,10.4296,false}, // rota-cidades ?12
    {49.4129,638.9118,6.8381,false}, // rota-cidades ?13
    {263.9971,742.3187,6.2651,false}, // rota-cidades ?14
    {494.8878,700.5719,4.2149,false}, // rota-cidades ?15
    {872.7902,698.0126,11.6613,false}, // rota-cidades ?16
    {1133.6105,813.5534,10.7983,false}, // rota-cidades ?17
    {1500.7997,831.2145,6.9541,false}, // rota-cidades ?18
    {1810.6566,882.3724,10.1784,false}, // rota-cidades ?19
    {1810.1010,1369.4485,6.8677,false}, // rota-cidades ?20
    {1851.0061,1639.2261,9.1023,false}, // rota-cidades ?21
    {1842.9984,1715.2317,11.8368,false}, // rota-cidades ?22
    {1719.2213,1684.8940,10.7477,false}, // rota-cidades ?23
    {1730.3020,1616.0708,9.7946,false}, // rota-cidades ?24
    {1722.9941,1366.3203,10.6328,true}, // rota-cidades ?25x
    {1786.6713,1271.0552,13.8393,false}, // rota-cidades ?26
    {1983.7291,1271.3290,10.8097,false}, // rota-cidades ?27
    {2045.6058,1207.7667,10.8049,false}, // rota-cidades ?28
    {2020.8237,854.7603,6.8678,false}, // rota-cidades ?29
    {1783.5143,783.9055,11.7016,false}, // rota-cidades ?30
    {1734.9530,537.1555,27.3493,false}, // rota-cidades ?31
    {1645.6051,283.8074,30.3638,false}, // rota-cidades ?32
    {1636.0729,-33.6340,36.7522,false}, // rota-cidades ?33
    {1697.1605,-666.5409,43.7787,false}, // rota-cidades ?34
    {1607.6506,-1265.3356,45.4702,false}, // rota-cidades ?35
    {1590.7576,-1702.2346,28.4187,false}, // rota-cidades ?36
    {1585.8196,-2090.7393,17.9255,false}, // rota-cidades ?37
    {1333.4565,-2202.3669,13.5406,false}, // rota-cidades ?37.2
    {1317.4794,-2405.6941,13.2151,false}, // rota-cidades ?38
    {1332.4110,-2466.3433,7.8187,false}, // rota-cidades ?38.2
    {1376.4373,-2466.3289,7.4262,false}, // rota-cidades ?39
    {1521.6656,-2425.1936,2.4336,false}, // rota-cidades ?40
    {1554.2799,-2289.8455,-2.8564,false}, // rota-cidades ?41
    {1591.0909,-2320.9888,-2.7169,false}, // rota-cidades ?42
    {1691.2494,-2323.0066,-2.7183,true} // rota-cidades ?43x
};

new const g_BUS_ROUTE_BR[][E_BUS_CHECKPOINT_DATA] = {
    {2416.1650,-2058.2998,13.3720,false}, // rota-brasilia 1
    {2394.4412,-1969.9176,13.5363,false}, // rota-brasilia 2
    {2210.9404,-1982.5931,13.3216,false}, // rota-brasilia 2.2
    {2261.6855,-2061.1858,13.5120,false}, // rota-brasilia 3
    {2225.0393,-2136.2754,13.4932,false}, // rota-brasilia 4
    {2127.5632,-2232.2207,13.5372,false}, // rota-brasilia 5
    {2106.0056,-2323.0149,13.5290,false}, // rota-brasilia 6
    {2172.8010,-2387.1177,13.5164,false}, // rota-brasilia 7
    {2156.9744,-2581.7451,13.5236,false}, // rota-brasilia 8
    {2024.7183,-2668.2507,11.4220,false}, // rota-brasilia 9
    {1549.4696,-2667.2983,7.5455,false}, // rota-brasilia 10
    {1351.1028,-2581.0820,13.5275,false}, // rota-brasilia 11
    {1358.1571,-2519.1648,13.5285,false}, // rota-brasilia 12
    {1409.5094,-2466.3589,5.8798,false}, // rota-brasilia 13
    {1522.3904,-2423.2429,2.4082,false}, // rota-brasilia 14
    {1539.0945,-2288.5627,-2.8510,false}, // rota-brasilia 15
    {1574.5140,-2308.3586,-2.7234,false}, // rota-brasilia 16
    {1714.4603,-2322.2886,-2.7539,true}, // rota-brasilia 17x
    {1735.0679,-2278.6116,-2.7055,false}, // rota-brasilia 18
    {1766.3368,-2256.1880,2.0127,false}, // rota-brasilia 19
    {1796.9775,-2301.2786,12.2938,false}, // rota-brasilia 20
    {1753.9301,-2316.7109,13.5248,false}, // rota-brasilia 21
    {1710.8950,-2315.4546,13.4601,true}, // rota-brasilia 22x
    {1608.7727,-2317.3896,13.5293,false}, // rota-brasilia 23
    {1560.8527,-2283.6868,13.5306,false}, // rota-brasilia 24
    {1522.3251,-2267.3762,13.5270,false}, // rota-brasilia 25
    {1464.3462,-2238.0171,13.5309,false}, // rota-brasilia 26
    {1409.5343,-2284.1646,13.5278,false}, // rota-brasilia 27
    {1350.3914,-2232.4636,13.5318,false}, // rota-brasilia 28
    {1400.6385,-2146.1033,13.5296,false}, // rota-brasilia 29
    {1525.9786,-2133.3955,14.3261,false}, // rota-brasilia 30
    {1666.5952,-1949.8549,23.9903,false}, // rota-brasilia 31
    {1620.7383,-1749.3816,27.8695,false}, // rota-brasilia 33
    {1631.5942,-1277.9387,43.6226,false}, // rota-brasilia 33
    {1653.8757,-1097.8289,59.8314,false}, // rota-brasilia 34
    {1713.5167,-698.6000,46.5308,false}, // rota-brasilia 35
    {1707.4392,-461.4957,33.2961,false}, // rota-brasilia 36
    {1678.8872,-211.4217,41.2198,false}, // rota-brasilia 37
    {1647.0737,-11.0329,36.7112,false}, // rota-brasilia 38
    {1685.0452,335.2435,30.2324,false}, // rota-brasilia 39
    {1750.7006,533.3654,27.2684,false}, // rota-brasilia 40
    {1809.3822,878.1724,10.3066,false}, // rota-brasilia 41
    {1808.7811,1613.8929,6.9588,false}, // rota-brasilia 42
    {1810.4847,2347.3232,6.9010,false}, // rota-brasilia 43
    {1711.7557,2554.9788,10.8519,false}, // rota-brasilia 44
    {1416.4249,2475.2781,6.8847,false}, // rota-brasilia 45
    {1280.5641,2477.0671,7.9685,false}, // rota-brasilia 46
    {1044.2261,2541.1892,10.8003,false}, // rota-brasilia 47
    {796.7169,2655.0593,14.7958,false}, // rota-brasilia 48
    {455.8075,2665.7070,55.9441,false}, // rota-brasilia 49
    {394.2917,2705.6978,60.8525,false}, // rota-brasilia 50
    {225.5799,2772.5137,60.9359,false}, // rota-brasilia 51
    {80.3212,2971.6228,49.1854,false}, // rota-brasilia 52
    {-193.7884,3009.1482,26.3719,false}, // rota-brasilia 53
    {-344.7767,3179.0464,26.5280,false}, // rota-brasilia 54
    {-465.6364,3422.3313,26.5577,false}, // rota-brasilia 55
    {-453.5245,4064.4915,26.8302,false}, // rota-brasilia 56
    {-440.6237,4777.8306,26.4752,false}, // rota-brasilia 57
    {-425.6651,5452.6958,26.5371,false}, // rota-brasilia 58
    {-414.4802,6040.9756,26.5526,false}, // rota-brasilia 59
    {-394.6222,7081.9927,26.5448,false}, // rota-brasilia 60
    {-379.9011,7924.7324,26.4748,false}, // rota-brasilia 61
    {-373.1362,8357.7617,13.7229,false}, // rota-brasilia 62
    {-371.4856,8637.8154,13.6837,true}, // rota-brasilia 63x
    {-372.2231,8951.7119,13.7129,true}, // rota-brasilia 64x
    {-341.9737,9056.4180,13.7338,false}, // rota-brasilia 65
    {-102.5112,9024.1084,13.8129,false}, // rota-brasilia 67
    {-102.9816,8504.4297,13.7724,false}, // rota-brasilia 68
    {-88.3038,8248.9727,13.3607,false}, // rota-brasilia 68.2
    {114.5257,8248.3096,13.4751,false}, // rota-brasilia 69
    {160.5482,8301.8604,13.7707,false}, // rota-brasilia 70
    {202.2212,8504.8271,13.7221,true}, // rota-brasilia 71x
    {239.9969,8552.3506,13.7732,false}, // rota-brasilia 72
    {241.3105,8828.1191,13.8125,true}, // rota-brasilia 73x
    {296.7519,8923.5996,13.7568,false}, // rota-brasilia 74
    {360.7014,8924.8818,13.7174,false}, // rota-brasilia 75
    {340.3666,8944.3740,13.7535,false}, // rota-brasilia 76
    {234.3988,8918.9160,13.7688,false}, // rota-brasilia 77
    {235.6407,8655.6016,13.7723,false}, // rota-brasilia 78
    {236.2816,8324.2441,13.7934,false}, // rota-brasilia 79
    {120.4780,8273.1250,13.7644,false}, // rota-brasilia 80
    {-20.2664,8274.6396,13.7225,true}, // rota-brasilia 81x
    {-177.1214,8274.8857,13.7542,false}, // rota-brasilia 82
    {-428.0230,8273.4248,13.7456,false}, // rota-brasilia 83
    {-506.3354,8324.4307,13.7731,false}, // rota-brasilia 84
    {-505.7503,8409.8164,13.6570,true}, // rota-brasilia 85x
    {-506.0746,8626.0537,13.7799,false}, // rota-brasilia 86
    {-506.3876,8721.7705,13.7821,false}, // rota-brasilia 87
    {-482.7125,8782.5820,13.7137,false}, // rota-brasilia 88
    {-397.4652,8759.9482,13.7312,false}, // rota-brasilia 89
    {-397.4953,8601.0449,13.7160,false}, // rota-brasilia 90
    {-397.6598,8369.5869,13.7166,false}, // rota-brasilia 91
    {-393.3517,8200.0439,14.7419,false}, // rota-brasilia 92
    {-399.3658,7960.8687,26.5495,false}, // rota-brasilia 93
    {-412.6931,7240.4849,27.0419,false}, // rota-brasilia 94
    {-422.2686,6774.2988,26.4973,false}, // rota-brasilia 95
    {-431.1676,6333.0835,26.5730,false}, // rota-brasilia 96
    {-435.1458,6038.6855,26.4621,false}, // rota-brasilia 97
    {-443.4366,5624.8579,27.0657,false}, // rota-brasilia 98
    {-451.6282,5228.2466,26.5136,false}, // rota-brasilia 99
    {-459.2470,4830.0688,26.5436,false}, // rota-brasilia 100
    {-466.8818,4409.8735,26.4638,false}, // rota-brasilia 101
    {-473.4557,4001.4045,26.4629,false}, // rota-brasilia 102
    {-483.7643,3494.5850,26.4642,false}, // rota-brasilia 103
    {-453.9729,3101.3438,26.9854,false}, // rota-brasilia 104
    {-297.6992,2987.9561,35.2662,false}, // rota-brasilia 105
    {-63.3947,2828.8306,77.4590,false}, // rota-brasilia 106
    {-21.0338,2635.7515,62.9723,false}, // rota-brasilia 107
    {243.5357,2742.7266,59.9942,false}, // rota-brasilia 108
    {441.8312,2701.0369,62.2846,false}, // rota-brasilia 109
    {624.9221,2708.9417,59.9568,false}, // rota-brasilia 110
    {878.7668,2641.4983,28.8871,false}, // rota-brasilia 111
    {850.4053,2500.4932,29.7394,false}, // rota-brasilia 112
    {761.1378,2343.2292,28.5330,false}, // rota-brasilia 113
    {679.1241,2409.2185,31.8790,false}, // rota-brasilia 114
    {741.0821,2600.1213,21.5888,false}, // rota-brasilia 115
    {941.7533,2573.1953,10.7105,false}, // rota-brasilia 116
    {1171.8771,2383.2769,10.2747,false}, // rota-brasilia 117
    {1205.5613,2196.7795,6.8815,false}, // rota-brasilia 118
    {1205.5693,1805.4606,6.8869,false}, // rota-brasilia 119
    {1205.1379,1290.4351,6.8826,false}, // rota-brasilia 120
    {1220.6825,965.1557,6.9624,false}, // rota-brasilia 121
    {1436.7869,831.2997,6.9628,false}, // rota-brasilia 122
    {1713.5341,831.7359,8.7175,false}, // rota-brasilia 123
    {1783.4561,770.7781,12.1293,false}, // rota-brasilia 124
    {1733.4301,532.8756,27.6337,false}, // rota-brasilia 125
    {1705.7339,464.8693,30.8066,false}, // rota-brasilia 126
    {1648.6128,292.9159,30.4036,false}, // rota-brasilia 127
    {1601.4202,57.2855,37.5814,false}, // rota-brasilia 128
    {1654.2998,-143.1823,35.0241,false}, // rota-brasilia 129
    {1680.1499,-429.8268,33.5209,false}, // rota-brasilia 130
    {1674.3885,-814.3182,56.8777,false}, // rota-brasilia 131
    {1611.6272,-1229.6908,50.4119,false}, // rota-brasilia 132
    {1590.1555,-1487.0211,28.7296,false}, // rota-brasilia 133
    {1611.9393,-1825.4082,26.5708,false}, // rota-brasilia 134
    {1573.4490,-2098.7903,16.9358,false}, // rota-brasilia 135
    {1350.4617,-2163.2886,13.5386,false}, // rota-brasilia 136
    {1329.9489,-2318.9075,13.5335,false}, // rota-brasilia 137
    {1318.1975,-2413.9539,11.8913,false}, // rota-brasilia 138
    {1329.1678,-2465.3650,7.8061,false}, // rota-brasilia 139
    {1388.5925,-2466.9563,6.8017,false}, // rota-brasilia 140
    {1522.9446,-2425.3655,2.4633,false}, // rota-brasilia 141
    {1550.3239,-2288.8499,-2.8412,false}, // rota-brasilia 142
    {1573.3571,-2307.5134,-2.7292,false}, // rota-brasilia 143
    {1714.7003,-2322.9861,-2.7498,true} // rota-brasilia 144x
};

new g_BusPlayers[MAX_PLAYERS][2];

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}

stock GetBusRoutePointsLength(routeId) {
    new ammountOfPoints;
    
    switch (routeId) {
        case BUS_ROUTE_LS:
            ammountOfPoints = sizeof(g_BUS_ROUTE_LS);
        case BUS_ROUTE_LV:
            ammountOfPoints = sizeof(g_BUS_ROUTE_LV);
        case BUS_ROUTE_SF:
            ammountOfPoints = sizeof(g_BUS_ROUTE_SF);
        case BUS_ROUTE_CITIES:
            ammountOfPoints = sizeof(g_BUS_ROUTE_CITIES);
        case BUS_ROUTE_BR:
            ammountOfPoints = sizeof(g_BUS_ROUTE_BR);
        default:
            ammountOfPoints = 0;
    }

    return ammountOfPoints;
}

stock bool:GetBusPoint(routeId, pointId, &Float:X, &Float:Y, &Float:Z)
{
    switch (routeId) {
        case BUS_ROUTE_LS: {
            X = g_BUS_ROUTE_LS[pointId][E_BUS_CHECKPOINT_X];
            Y = g_BUS_ROUTE_LS[pointId][E_BUS_CHECKPOINT_Y];
            Z = g_BUS_ROUTE_LS[pointId][E_BUS_CHECKPOINT_Z];
        }
        case BUS_ROUTE_LV: {
            X = g_BUS_ROUTE_LV[pointId][E_BUS_CHECKPOINT_X];
            Y = g_BUS_ROUTE_LV[pointId][E_BUS_CHECKPOINT_Y];
            Z = g_BUS_ROUTE_LV[pointId][E_BUS_CHECKPOINT_Z];
        }
        case BUS_ROUTE_SF: {
            X = g_BUS_ROUTE_SF[pointId][E_BUS_CHECKPOINT_X];
            Y = g_BUS_ROUTE_SF[pointId][E_BUS_CHECKPOINT_Y];
            Z = g_BUS_ROUTE_SF[pointId][E_BUS_CHECKPOINT_Z];
        }
        case BUS_ROUTE_BR: {
            X = g_BUS_ROUTE_BR[pointId][E_BUS_CHECKPOINT_X];
            Y = g_BUS_ROUTE_BR[pointId][E_BUS_CHECKPOINT_Y];
            Z = g_BUS_ROUTE_BR[pointId][E_BUS_CHECKPOINT_Z];
        }
        case BUS_ROUTE_CITIES: {
            X = g_BUS_ROUTE_CITIES[pointId][E_BUS_CHECKPOINT_X];
            Y = g_BUS_ROUTE_CITIES[pointId][E_BUS_CHECKPOINT_Y];
            Z = g_BUS_ROUTE_CITIES[pointId][E_BUS_CHECKPOINT_Z];
        }
        default:
            return false;
    }

    return true;
}

stock Float:GetBusRouteDistance(routeId) {
    new ammountOfPoints = GetBusRoutePointsLength(routeId);

    new Float:lastPoint_X, Float:lastPoint_Y, Float:lastPoint_Z, Float:currentPoint_X, Float:currentPoint_Y, Float:currentPoint_Z;
    new Float:totalDistance = 0;

    GetBusPoint(routeId, 0, lastPoint_X, lastPoint_Y, lastPoint_Z);

    for(new i=1; i<ammountOfPoints; i++)
    {
        GetBusPoint(routeId, i, currentPoint_X, currentPoint_Y, currentPoint_Z);
        totalDistance += GetDistanceBetweenPoints(lastPoint_X, lastPoint_Y, lastPoint_Z, currentPoint_X, currentPoint_Y, currentPoint_Z);
        lastPoint_X = currentPoint_X;
        lastPoint_Y = currentPoint_Y;
        lastPoint_Z = currentPoint_Z;
    }

    return totalDistance;
}

stock bool:IsStopPoint(routeId, pointId)
{
    new bool: isStop;

    if(pointId < 0 || routeId < 0)
        return false;
    
    switch (routeId) {
        case BUS_ROUTE_LS:
            isStop = g_BUS_ROUTE_LS[pointId][E_BUS_CHECKPOINT_IS_STOP];
        case BUS_ROUTE_LV:
            isStop = g_BUS_ROUTE_LV[pointId][E_BUS_CHECKPOINT_IS_STOP];
        case BUS_ROUTE_SF:
            isStop = g_BUS_ROUTE_SF[pointId][E_BUS_CHECKPOINT_IS_STOP];
        case BUS_ROUTE_BR:
            isStop = g_BUS_ROUTE_BR[pointId][E_BUS_CHECKPOINT_IS_STOP];
        case BUS_ROUTE_CITIES:
            isStop = g_BUS_ROUTE_CITIES[pointId][E_BUS_CHECKPOINT_IS_STOP];
        default:
            isStop = false;
    }

    return isStop;
}

stock bool:IsFinalBusPoint(routeId, pointId)
{
    new bool: isFinal;

    if(pointId < 0 || routeId < 0)
        return false;
    
    switch (routeId) {
        case BUS_ROUTE_LS:
            isFinal = pointId == sizeof(g_BUS_ROUTE_LS) - 1;
        case BUS_ROUTE_LV:
            isFinal = pointId == sizeof(g_BUS_ROUTE_LV) - 1;
        case BUS_ROUTE_SF:
            isFinal = pointId == sizeof(g_BUS_ROUTE_SF) - 1;
        case BUS_ROUTE_BR:
            isFinal = pointId == sizeof(g_BUS_ROUTE_BR) - 1;
        case BUS_ROUTE_CITIES:
            isFinal = pointId == sizeof(g_BUS_ROUTE_CITIES) - 1;
        default:
            isFinal = false;
    }

    return isFinal;
}

stock bool:IsPlayerInBusCheckpoint(playerid)
{
    new Float:posX, Float:posY, Float:posZ;
    new routeId = g_BusPlayers[playerid][0];
    new pointId = g_BusPlayers[playerid][1];
    new bool:isValidRoute;
    
    if(routeId == -1)
        return false;

    isValidRoute = GetBusPoint(routeId, pointId, posX, posY, posZ);

    if(!isValidRoute)
        return false;

    return IsPlayerInRangeOfPoint(playerid, BUS_CHECKPOINT_SIZE, posX, posY, posZ) == 0 ? false : true;
}

stock HandleEnterBusCheckpoint(playerid)
{
    new Float:nextX, Float:nextY, Float:nextZ, Float:currentX, Float:currentY, Float:currentZ;
    new bool:isStop;
    new routeId, currentPointId, checkpointType;

    DisablePlayerRaceCheckpoint(playerid);
    routeId = g_BusPlayers[playerid][0];
    isStop = IsStopPoint(routeId, g_BusPlayers[playerid][1]);

    if(IsFinalBusPoint(routeId, g_BusPlayers[playerid][1]))
    {        
        currentPointId = g_BUS_ROUTES_INFO[routeId][BUS_ROUTE_POINT_REPEAT];
        g_BusPlayers[playerid][1] = g_BUS_ROUTES_INFO[routeId][BUS_ROUTE_POINT_REPEAT];
        SendClientMessage(playerid, -1, "Parada Final!");

        if(g_BUS_ROUTES_INFO[routeId][BUS_ROUTE_POINT_REPEAT] == BUS_ROUTE_NO_REPEAT)
        {
            g_BusPlayers[playerid][0] = -1;
            g_BusPlayers[playerid][1] = -1;

            return;
        }
    }
    else
    {
        currentPointId = ++g_BusPlayers[playerid][1];
    }
    
    GetBusPoint(routeId, currentPointId, currentX, currentY, currentZ);
    if(isStop)
    {
        SendClientMessage(playerid, -1, "Parada de ônibus!");
    }
    
    if(IsFinalBusPoint(routeId, currentPointId))
    {
        GetBusPoint(routeId, 0, nextX, nextY, nextZ);
    }
    else
        GetBusPoint(routeId, currentPointId+1, nextX, nextY, nextZ);

    checkpointType = IsStopPoint(routeId, currentPointId) ? 2 : 0;
    SetPlayerRaceCheckpoint(playerid, checkpointType, currentX, currentY, currentZ, nextX, nextY, nextZ, BUS_CHECKPOINT_SIZE);
}

enum {
    testeenun=8090
}

stock ShowPlayerInitBusRouteDialog(playerid)
{
    new vehicleId = GetPlayerVehicleID(playerid);
    new vehicleModel = GetVehicleModel(vehicleId);
    new busType = vehicleModel == 431 ? BUS_ROUTE_TYPE_MUNICIPAL : BUS_ROUTE_TYPE_ESTADUAL;

    new routesOptions[300];
    format(routesOptions, sizeof(routesOptions), "");

    for (new i=0; i<sizeof(g_BUS_ROUTES_INFO); i++)
    {
        new optionColor[] = "FFFFFF";

        if(busType != g_BUS_ROUTES_INFO[i][BUS_ROUTE_TYPE])
        {
            format(optionColor, sizeof(optionColor), "808080");
        }

        format(routesOptions, sizeof(routesOptions), "%s{%s}%s\t{%s}%.1fkm\n", routesOptions, optionColor, g_BUS_ROUTES_INFO[i][BUS_ROUTE_NAME], optionColor, g_BUS_ROUTES_INFO[i][BUS_ROUTE_DISTANCE]);
    }

    ShowPlayerDialog(playerid, testeenun, DIALOG_STYLE_TABLIST, "Escolha a rota de sua preferência", routesOptions, "Iniciar", "Cancelar");
}

public OnFilterScriptInit()
{
    for(new i=0; i < sizeof(g_BUS_ROUTES_INFO); i++)
    {
        new Float:routeDistance = GetBusRouteDistance(i) / 1000;
        g_BUS_ROUTES_INFO[i][BUS_ROUTE_DISTANCE] = routeDistance;
    }
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid == DIALOG_REVISTA_TIPO)
    {
        if(!response) return SendClientMessage(playerid, COLOR_GREY, "Você cancelou a revista.");

        switch(listitem)
        {
            case 0:
                ShowPlayerInspectDialog(playerid, )
        }
    }

    if(dialogid == testeenun)
    {
        printf("%d", dialogid);
        if(response)
        {
            new vehicleId = GetPlayerVehicleID(playerid);
            new vehicleModel = GetVehicleModel(vehicleId);
            new busType = vehicleModel == 431 ? BUS_ROUTE_TYPE_MUNICIPAL : BUS_ROUTE_TYPE_ESTADUAL;

            if (busType != g_BUS_ROUTES_INFO[listitem][BUS_ROUTE_TYPE])
            {
                ShowPlayerInitBusRouteDialog(playerid);
                return;
            }

            new routeNameMessage[36];
            new routeId = listitem;
            
            g_BusPlayers[playerid][0] = routeId;
            g_BusPlayers[playerid][1] = -1;

            format(routeNameMessage, sizeof(routeNameMessage), "%s inicializada.", g_BUS_ROUTES_INFO[routeId][BUS_ROUTE_NAME]);
            SendClientMessage(playerid, -1, routeNameMessage);

            HandleEnterBusCheckpoint(playerid);
            return;
        }
    }
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(IsPlayerInBusCheckpoint(playerid))
        HandleEnterBusCheckpoint(playerid);
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if (newkeys & KEY_SECONDARY_ATTACK)
    {
        SendClientMessage(playerid, -1, "sai{000000}u");
        ClearAnimations(playerid);
        if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
        {
            SendClientMessage(playerid, -1, "Usando jet");
        }
    }
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new string[256];
    format(string, sizeof(string), "State Change: %d to %d.", oldstate, newstate);
    SendClientMessage(playerid, -1, string);
}

public OnPlayerCommandText(playerid, cmdtext[]) {
	new idx;
	new cmd[256];
    new tmp[150];
	
	cmd = strtok(cmdtext, idx);

    if(strcmp(cmd, "/respawncar", true) == 0) {
		tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /respawncar [id]");
            return 1;
        }
        new vehicleid = strval(tmp);

        new vehicleExists = SetVehicleToRespawn(vehicleid);
        
        if(vehicleExists)
            SendClientMessage(playerid, -1, "Veículo respawnado");
        else
            SendClientMessage(playerid, -1, "Veículo não existe!");

		return 1;
	}

	if(strcmp(cmd, "/car", true) == 0) {
		new Float:nextX, Float:nextY, Float:nextZ;

		tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /car [id]");
            return 1;
        }
        new carModel = strval(tmp);

        GetPlayerPos(playerid, nextX, nextY, nextZ);
		new carId = CreateVehicle(carModel, nextX, nextY, nextZ, 82.2873, -1, -1, -1);

        new Text3D:labelCar = Create3DTextLabel("{00C2EC}Sem rota", 0xFF0000AA, 0.0, 5.0, 2.0, 30.0, 0, 1);
        Attach3DTextLabelToVehicle(labelCar, carId, 0.0, 5.0, 2.0);


		return 1;
	}

    if(strcmp(cmd, "/crash", true) == 0) {
		tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /crash [id]");
            return 1;
        }
        new id = strval(tmp);

        enum E_CRASH {
            crash,
            string[10]
        };

        new crashVar[10][E_CRASH];

        new tryCrash = crashVar[id][string][5];


		return 1;
	}

    if(strcmp(cmd, "/iniciarrota", true) == 0) {
        if(!IsPlayerInAnyVehicle(playerid))
        {
            SendClientMessage(playerid, -1, "Você não está em um veículo.");
            return 1;
        }

        // new vehicleId = GetPlayerVehicleID(playerid);

        // if(!isAOnibusCar(vehicleId)) {
        //     SendClientMessage(playerid, -1, "Você não está em um ônibus.");
        //     return 1;
        // }

        ShowPlayerInitBusRouteDialog(playerid);
    	return 1;
	}

    if(strcmp(cmd, "/jet", true) == 0) {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    	return 1;
	}

    if(strcmp(cmd, "/sjet", true) == 0) {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	return 1;
	}

    if(strcmp(cmd, "/testerevista", true) == 0) {
        ShowPlayerDialog(playerid, DIALOG_REVISTA_TIPO, DIALOG_STYLE_LIST, "Escolha o tipo de revista", "Revistar o cidadão\nRevistar mochila", "Revistar", "Cancelar");
    	return 1;
	}

	if(strcmp(cmd, "/rota", true) == 0) {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /rota [id]");
            return 1;
        }
        new routeNameMessage[36];
        new routeId = strval(tmp);
		
		g_BusPlayers[playerid][0] = routeId;
		g_BusPlayers[playerid][1] = -1;

        format(routeNameMessage, sizeof(routeNameMessage), "%s inicializada.", g_BUS_ROUTES_INFO[routeId][BUS_ROUTE_NAME]);
        SendClientMessage(playerid, -1, routeNameMessage);

        HandleEnterBusCheckpoint(playerid);
    	return 1;
	}

    if(strcmp(cmd, "/tamanhorota", true) == 0) {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /tamanhorota [id]");
            return 1;
        }
        new routeLenghtMessage[36];
        new routeId = strval(tmp);

        format(routeLenghtMessage, sizeof(routeLenghtMessage), "Tamanho: %f.", GetBusRouteDistance(routeId));
        SendClientMessage(playerid, -1, routeLenghtMessage);

    	return 1;
	}

    if(strcmp(cmd, "/pularrota", true) == 0) {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /pularrota [id]");
            return true;
        }
        new pointId = strval(tmp);

        new s[50];
        format(s, sizeof(s), "Ponto Id: %d", pointId);
        SendClientMessage(playerid, -1, s);

        g_BusPlayers[playerid][1] = pointId-1;

		HandleEnterBusCheckpoint(playerid);
    	return 1;
	}

    if(strcmp(cmd, "/remover", true) == 0) {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /remover [slotid]");
            return true;
        }
        new slotid = strval(tmp);

        RemovePlayerWeaponBySlot(playerid, slotid);
        GivePlayerWeapon(playerid, 24, 21);
    	return 1;
	}

    if(strcmp(cmd, "/setarma", true) == 0) {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, -1, "Use: /setarma [id]");
            return true;
        }
        new weaponid = strval(tmp);

        SetPlayerAmmo(playerid, weaponid, 10);
    	return 1;
	}

    if(strcmp(cmd, "/face", true) == 0) {
        new Float:Angle, Float:x, Float:y, Float:z;
        new message[256];
        GetPlayerFacingAngle(playerid, Angle);
        GetPlayerPos(playerid, x, y, z);


        format(message, sizeof(message), "X: %.1f | Y: %.1f | Z: %.1f | Angle: %.1f", x, y, z, Angle);
        SendClientMessage(playerid, -1, message);
    	return 1;
	}

    if(strcmp(cmd, "/puxando", true) == 0) {
        new Float:copAngle, Float:copX, Float:copY, Float:copZ, Float:x, Float:y;
        GetPlayerFacingAngle(playerid, copAngle);
        GetPlayerPos(playerid, copX, copY, copZ);

        copAngle = 360.0 - copAngle;

        new Float:plusX = -1 * floatsin(copAngle, degrees);
        new Float:plusY = -1 * floatcos(copAngle, degrees);

        x = copX + plusX;
        y = copY + plusY;

        DisablePlayerCheckpoint(playerid);
        SetPlayerCheckpoint(playerid, x, y, copZ, 1.0);
    	return 1;
	}

	return 0;
}


stock RemovePlayerWeaponBySlot(playerid, slotid)
{
	new weapondata[12][2];

	for(new i = 0; i < 12; i++)
	{
		GetPlayerWeaponData(playerid, i, weapondata[i][0], weapondata[i][1]);
		if(i == slotid) weapondata[i][0] = 0;
	}

	ResetPlayerWeapons(playerid);

	for(new i = 0; i != 12; i++)
		if(weapondata[i][0] != 0)
			GivePlayerWeapon(playerid, weapondata[i][0], weapondata[i][1]);
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

// IsNumeric(const string[])
// {
// 	for (new i = 0, j = strlen(string); i < j; i++)
// 	{
// 		if (string[i] > '9' || string[i] < '0') return 0;
// 	}
// 	return 1;
// }

// ReturnUser(text[], playerid = INVALID_PLAYER_ID)
// {
// 	new pos = 0;
// 	while (text[pos] < 0x21) // Strip out leading spaces
// 	{
// 		if (text[pos] == 0) return INVALID_PLAYER_ID; // No passed text
// 		pos++;
// 	}
// 	new userid = INVALID_PLAYER_ID;
// 	if (IsNumeric(text[pos])) // Check whole passed string
// 	{
// 		// If they have a numeric name you have a problem (although names are checked on id failure)
// 		userid = strval(text[pos]);
// 		if (userid >=0 && userid < MAX_PLAYERS)
// 		{
// 			if(!IsPlayerConnected(userid))
// 			{
// 				/*if (playerid != INVALID_PLAYER_ID)
// 				{
// 					SendClientMessage(playerid, 0xFF0000AA, "User not connected");
// 				}*/
// 				userid = INVALID_PLAYER_ID;
// 			}
// 			else
// 			{
// 				return userid; // A player was found
// 			}
// 		}
// 		/*else
// 		{
// 			if (playerid != INVALID_PLAYER_ID)
// 			{
// 				SendClientMessage(playerid, 0xFF0000AA, "Invalid user ID");
// 			}
// 			userid = INVALID_PLAYER_ID;
// 		}
// 		return userid;*/
// 		// Removed for fallthrough code
// 	}
// 	// They entered [part of] a name or the id search failed (check names just incase)
// 	new len = strlen(text[pos]);
// 	new count = 0;
// 	new name[MAX_PLAYER_NAME];
// 	for (new i = 0; i < MAX_PLAYERS; i++)
// 	{
// 		if (IsPlayerConnected(i))
// 		{
// 			GetPlayerName(i, name, sizeof (name));
// 			if (strcmp(name, text[pos], true, len) == 0) // Check segment of name
// 			{
// 				if (len == strlen(name)) // Exact match
// 				{
// 					return i; // Return the exact player on an exact match
// 					// Otherwise if there are two players:
// 					// Me and MeYou any time you entered Me it would find both
// 					// And never be able to return just Me's id
// 				}
// 				else // Partial match
// 				{
// 					count++;
// 					userid = i;
// 				}
// 			}
// 		}
// 	}
// 	if (count != 1)
// 	{
// 		if (playerid != INVALID_PLAYER_ID)
// 		{
// 			if (count)
// 			{
// 				SendClientMessage(playerid, 0xFF0000AA, "Multiple users found, please narrow earch");
// 			}
// 			else
// 			{
// 				SendClientMessage(playerid, 0xFF0000AA, "No matching user found");
// 			}
// 		}
// 		userid = INVALID_PLAYER_ID;
// 	}
// 	return userid; // INVALID_USER_ID for bad return
// }