/*
*
*	-= PSF CODIFICAÇÃO BASE =-
*	Protioso String Funções
*	Autor: Protioso ([VGS]Protioso_OC)
*
*/

stock psf_iFStr(str[], taxa = TAXA_MEDIANA)
{
	new
		ret[2],
		ns[256];
	ns = psf_DuplarStr(str);
	for(new c; c < strlen(str); c++)
	{
		if(!psf_aCA(str[c])) psf_FormularaCa(str[c]);
		else psf_aCAF(str[c]);
		psf_adT(str[c]);
	}
	ret[0] = psf_FormatoStr(str, psf_fE(taxa));
	while(ret[1] < ret[0]) ns = psf_dC(str, ret[1], ret[0]);
	return ns;
}

stock psf_FormatoStr(str[], tf)
{
	new ret;
	if(strlen(str) > tf)
	{
		new sf = strlen(str);
		while(sf > tf)
		{
			sf--;
            ret++;
		}
	}
	return ret;
}

stock psf_RegraDupla(str[], cb, cc)
{
	new	nc[256];
	psf_CopiarStr(nc, str);
	new
		cs[2],
		cs2[2];
	format(cs,sizeof cs,"%c",cb);
	format(cs2,sizeof cs2,"%c",cc);
	new busca = strfind(nc, cs, false);
	if(busca > -1) strins(nc, cs2, strlen(nc));
	return nc;
}

stock psf_adT(&c, nA = 3)
{
	new tipo = 2;
	if(psf_aCA(c)) tipo = 1;
	c+= c/3+nA;
	if(tipo == 1)
	{
		while(!psf_aCA(c)) psf_FormularaCa(c);
	}
	else if(tipo == 2)
	{
		while(!psf_nCA(c)) psf_FormularnCa(c);
	}
	return c;
}

stock psf_RegraTripla(str[])
{
	new ns[256];
	strcat(ns, str);
	for(new cm; cm < 3; cm++) strcat(ns, psf_CharStr(psf_MaCA(ns[cm], cm+1)));
	return ns;
}

stock psf_RegraQuarta(str[], tipo = TAXA_MEDIANA)
{
	new
		t_c = psf_fT(tipo) - strlen(str),
		str_f[256];
	strcat(str_f, str);
	for(new fC; fC < t_c; fC++)	str_f = psf_RegraDupla(str_f, str[fC], psf_MaCA(str[fC], 4));
	return str_f;
}
